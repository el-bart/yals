#!/usr/bin/env python3
import re
import sys
import pcbnew
import csv

def name(value, enc):
    return "{} #**# {}".format(enc, value)

def simple_string(l):
    out = ""
    for e in l:
        out += str(e) + " "
    return out[:-1]


if len(sys.argv) != 1+2:
    sys.stderr.write("{} <my_board.kicad_pcb> </path/to/bom.csv>\n".format(sys.argv[0]))
    sys.exit(2)

board_name = sys.argv[1]
out_file = sys.argv[2]

board = pcbnew.LoadBoard(board_name)
bom = dict()

# generate parts list, grouped by type and value
for part in board.Footprints():
    reference = str( part.Reference().GetText() )
    value =  str( part.Value().GetText() )
    enclosure = str( part.GetFPID().GetLibItemName() )
    n = name(value, enclosure)
    bom.setdefault(n, [value, enclosure, []])
    bom[n][2].append(reference)

# output csv
with open(out_file, 'w', newline='') as f:
    fw = csv.writer(f, delimiter=';', quotechar='"', quoting=csv.QUOTE_MINIMAL)
    fw.writerow(["id", "package", "value", "count", "instances"])
    i = 1
    keys = list( bom.keys() )
    keys.sort()
    for key in keys:
        value, enc, refs = bom[key]
        refs_array = simple_string(refs).split(' ')
        refs_sorted = sorted( refs_array, key=lambda e: int( re.sub('^[^0-9]+', '', e) ) )
        fw.writerow([i, enc, value, len(refs), " ".join(refs_sorted)])
        i += 1
